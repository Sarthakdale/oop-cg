#include <iostream>
#include <cmath>
#include <graphics.h>

using namespace std;

// Function to draw the Koch curve using recursion
void kochCurve(int x1, int y1, int x2, int y2, int depth) {
    if (depth == 0) {
        // Base case: draw a simple line segment
        line(x1, y1, x2, y2);
        return;
    }

    // Calculate the 1/3rd and 2/3rd points
    int deltaX = x2 - x1;
    int deltaY = y2 - y1;
    
    int xA = x1 + deltaX / 3;
    int yA = y1 + deltaY / 3;
    
    int xB = x1 + 2 * deltaX / 3;
    int yB = y1 + 2 * deltaY / 3;
    
    // Calculate the peak point of the bump
    double angle = atan2(deltaY, deltaX) - M_PI / 3;
    int xC = xA + cos(angle) * sqrt(3) * (sqrt(deltaX * deltaX + deltaY * deltaY) / 3);
    int yC = yA + sin(angle) * sqrt(3) * (sqrt(deltaX * deltaX + deltaY * deltaY) / 3);

    // Recursively draw smaller Koch curves
    kochCurve(x1, y1, xA, yA, depth - 1);
    kochCurve(xA, yA, xC, yC, depth - 1);
    kochCurve(xC, yC, xB, yB, depth - 1);
    kochCurve(xB, yB, x2, y2, depth - 1);
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    int x1, y1, x2, y2, depth;

    cout << "Enter the starting coordinates (x1 y1): ";
    cin >> x1 >> y1;
    cout << "Enter the ending coordinates (x2 y2): ";
    cin >> x2 >> y2;
    cout << "Enter the number of iterations (depth of the fractal): ";
    cin >> depth;

    // Draw the Koch curve fractal
    kochCurve(x1, y1, x2, y2, depth);

    cout << "Press any key to exit...";
    getch();
    closegraph();

    return 0;
}

#include <iostream>
#include <vector>

using namespace std;

// Base class for players
class Player {
public:
    virtual void makeMove(vector<vector<char>>& board) = 0;  // Virtual function for making a move
    virtual char getSymbol() const = 0;                      // Return the player's symbol
};

// Derived class for Human player
class HumanPlayer : public Player {
private:
    char symbol;  // Player's symbol ('X' or 'O')
public:
    HumanPlayer(char sym) : symbol(sym) {}

    void makeMove(vector<vector<char>>& board) override {
        int row, col;
        cout << "Enter row and column (0-2) to place " << symbol << ": ";
        cin >> row >> col;
        while (row < 0 || row > 2 || col < 0 || col > 2 || board[row][col] != ' ') {
            cout << "Invalid move! Try again: ";
            cin >> row >> col;
        }
        board[row][col] = symbol;
    }

    char getSymbol() const override {
        return symbol;
    }
};

// Derived class for AI player
class AIPlayer : public Player {
private:
    char symbol;  // Player's symbol ('X' or 'O')
public:
    AIPlayer(char sym) : symbol(sym) {}

    void makeMove(vector<vector<char>>& board) override {
        // Simple AI: choose the first available empty space
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    board[i][j] = symbol;
                    return;
                }
            }
        }
    }

    char getSymbol() const override {
        return symbol;
    }
};

// Class to manage the Tic-Tac-Toe game
class TicTacToe {
private:
    vector<vector<char>> board;  // 3x3 board for Tic-Tac-Toe
    Player* player1;             // Player 1 (X)
    Player* player2;             // Player 2 (O)
    int turn;                    // Keeps track of whose turn it is (1 or 2)

public:
    TicTacToe(Player* p1, Player* p2) : player1(p1), player2(p2), turn(1) {
        board = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
    }

    // Function to draw the board
    void drawBoard() {
        cout << "\nTic-Tac-Toe Board:\n";
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                cout << board[i][j];
                if (j < 2) cout << " | ";
            }
            cout << endl;
            if (i < 2) cout << "---------\n";
        }
        cout << endl;
    }

    // Function to check if there's a winner
    bool checkWinner(char symbol) {
        // Check rows, columns, and diagonals for a win
        for (int i = 0; i < 3; i++) {
            if ((board[i][0] == symbol && board[i][1] == symbol && board[i][2] == symbol) ||
                (board[0][i] == symbol && board[1][i] == symbol && board[2][i] == symbol)) {
                return true;
            }
        }
        if ((board[0][0] == symbol && board[1][1] == symbol && board[2][2] == symbol) ||
            (board[0][2] == symbol && board[1][1] == symbol && board[2][0] == symbol)) {
            return true;
        }
        return false;
    }

    // Function to check if the board is full (draw)
    bool isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    // Function to start and play the game
    void playGame() {
        while (true) {
            drawBoard();
            Player* currentPlayer = (turn % 2 == 1) ? player1 : player2;
            cout << "Player " << currentPlayer->getSymbol() << "'s turn\n";
            currentPlayer->makeMove(board);

            // Check if the current player wins
            if (checkWinner(currentPlayer->getSymbol())) {
                drawBoard();
                cout << "Player " << currentPlayer->getSymbol() << " wins!" << endl;
                break;
            }

            // Check if the board is full (draw)
            if (isBoardFull()) {
                drawBoard();
                cout << "It's a draw!" << endl;
                break;
            }

            turn++;
        }
    }
};

// Main function
int main() {
    int choice;
    cout << "Tic-Tac-Toe Game\n";
    cout << "Choose game mode:\n1. Player vs Player\n2. Player vs AI\nEnter choice: ";
    cin >> choice;

    if (choice == 1) {
        HumanPlayer p1('X');
        HumanPlayer p2('O');
        TicTacToe game(&p1, &p2);
        game.playGame();
    } else if (choice == 2) {
        HumanPlayer p1('X');
        AIPlayer p2('O');
        TicTacToe game(&p1, &p2);
        game.playGame();
    } else {
        cout << "Invalid choice. Exiting game." << endl;
    }

    return 0;
}

#include <iostream>
#include <graphics.h>
#include <cmath>
using namespace std;

class Transformation2D {
private:
    int points[10][2];
    int n; // Number of vertices

public:
    // Input the vertices of the object
    void inputObject(const string &objectName) {
        if (objectName == "triangle") {
            n = 3;
            cout << "Enter the vertices of the equilateral triangle (x y):\n";
            for (int i = 0; i < n; i++) {
                cout << "Vertex " << i + 1 << ": ";
                cin >> points[i][0] >> points[i][1];
            }
        } else if (objectName == "rhombus") {
            n = 4;
            cout << "Enter the vertices of the rhombus (x y):\n";
            for (int i = 0; i < n; i++) {
                cout << "Vertex " << i + 1 << ": ";
                cin >> points[i][0] >> points[i][1];
            }
        }
    }

    // Display the object
    void drawObject() {
        for (int i = 0; i < n; i++) {
            line(points[i][0], points[i][1], points[(i + 1) % n][0], points[(i + 1) % n][1]);
        }
    }

    // Operator overloading for translation
    void operator+(const pair<int, int> &translation) {
        int tx = translation.first;
        int ty = translation.second;
        for (int i = 0; i < n; i++) {
            points[i][0] += tx;
            points[i][1] += ty;
        }
    }

    // Operator overloading for scaling
    void operator*(const pair<float, float> &scaling) {
        float sx = scaling.first;
        float sy = scaling.second;
        for (int i = 0; i < n; i++) {
            points[i][0] = round(points[i][0] * sx);
            points[i][1] = round(points[i][1] * sy);
        }
    }

    // Operator overloading for rotation
    void operator^(float angle) {
        float rad = angle * M_PI / 180.0;
        for (int i = 0; i < n; i++) {
            int x = points[i][0];
            int y = points[i][1];
            points[i][0] = round(x * cos(rad) - y * sin(rad));
            points[i][1] = round(x * sin(rad) + y * cos(rad));
        }
    }
};

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    Transformation2D triangle, rhombus;

    // Input and draw triangle
    cout << "Equilateral Triangle Transformation:\n";
    triangle.inputObject("triangle");
    cout << "Original Triangle:\n";
    triangle.drawObject();
    getch();
    cleardevice();

    // Translation for triangle
    int tx, ty;
    cout << "Enter translation factors for triangle (tx ty): ";
    cin >> tx >> ty;
    triangle + make_pair(tx, ty);
    cout << "Translated Triangle:\n";
    triangle.drawObject();
    getch();
    cleardevice();

    // Scaling for triangle
    float sx, sy;
    cout << "Enter scaling factors for triangle (sx sy): ";
    cin >> sx >> sy;
    triangle * make_pair(sx, sy);
    cout << "Scaled Triangle:\n";
    triangle.drawObject();
    getch();
    cleardevice();

    // Rotation for triangle
    float angle;
    cout << "Enter rotation angle for triangle in degrees: ";
    cin >> angle;
    triangle ^ angle;
    cout << "Rotated Triangle:\n";
    triangle.drawObject();
    getch();
    cleardevice();

    // Input and draw rhombus
    cout << "Rhombus Transformation:\n";
    rhombus.inputObject("rhombus");
    cout << "Original Rhombus:\n";
    rhombus.drawObject();
    getch();
    cleardevice();

    // Translation for rhombus
    cout << "Enter translation factors for rhombus (tx ty): ";
    cin >> tx >> ty;
    rhombus + make_pair(tx, ty);
    cout << "Translated Rhombus:\n";
    rhombus.drawObject();
    getch();
    cleardevice();

    // Scaling for rhombus
    cout << "Enter scaling factors for rhombus (sx sy): ";
    cin >> sx >> sy;
    rhombus * make_pair(sx, sy);
    cout << "Scaled Rhombus:\n";
    rhombus.drawObject();
    getch();
    cleardevice();

    // Rotation for rhombus
    cout << "Enter rotation angle for rhombus in degrees: ";
    cin >> angle;
    rhombus ^ angle;
    cout << "Rotated Rhombus:\n";
    rhombus.drawObject();
    getch();

    closegraph();
    return 0;
}

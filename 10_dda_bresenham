#include <iostream>
#include <graphics.h>
using namespace std;

class PatternDrawer {
public:
    // Function to draw a line using DDA algorithm
    void drawLineDDA(int x1, int y1, int x2, int y2) {
        int dx = x2 - x1;
        int dy = y2 - y1;
        int steps = max(abs(dx), abs(dy));
        float xInc = dx / (float)steps;
        float yInc = dy / (float)steps;
        float x = x1, y = y1;

        for (int i = 0; i <= steps; i++) {
            putpixel(round(x), round(y), WHITE);
            x += xInc;
            y += yInc;
        }
    }

    // Function to draw a circle using Bresenham's algorithm
    void drawCircleBresenham(int xc, int yc, int r) {
        int x = 0, y = r;
        int d = 3 - 2 * r;

        while (y >= x) {
            drawCirclePoints(xc, yc, x, y);
            x++;

            if (d > 0) {
                y--;
                d = d + 4 * (x - y) + 10;
            } else {
                d = d + 4 * x + 6;
            }
            drawCirclePoints(xc, yc, x, y);
        }
    }

private:
    void drawCirclePoints(int xc, int yc, int x, int y) {
        putpixel(xc + x, yc + y, WHITE);
        putpixel(xc - x, yc + y, WHITE);
        putpixel(xc + x, yc - y, WHITE);
        putpixel(xc - x, yc - y, WHITE);
        putpixel(xc + y, yc + x, WHITE);
        putpixel(xc - y, yc + x, WHITE);
        putpixel(xc + y, yc - x, WHITE);
        putpixel(xc - y, yc - x, WHITE);
    }
};

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);

    PatternDrawer drawer;

    int x1, y1, x2, y2, xc, yc, radius;

    // Input and draw line using DDA
    cout << "Enter the endpoints of the line (x1 y1 x2 y2): ";
    cin >> x1 >> y1 >> x2 >> y2;
    drawer.drawLineDDA(x1, y1, x2, y2);

    // Input and draw circle using Bresenham's algorithm
    cout << "Enter the center and radius of the circle (xc yc radius): ";
    cin >> xc >> yc >> radius;
    drawer.drawCircleBresenham(xc, yc, radius);

    cout << "Press any key to exit...";
    getch();
    closegraph();

    return 0;
}
